version: "3.7"

services:
  
  # This service runs dagit, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from dagit will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagit:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: dagit
      args:
        DAGSTER_CONFIG: "local"
    image: nhl_dagit
    command: "dagit -h 0.0.0.0 -p 3000 -w workspace.yaml"
    container_name: dagit
    expose:
      - "3000"
    ports:
      - "3000:3000"
    env_file:
      - dev.env
    volumes: # Make docker client accessible so we can terminate containers from dagit
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - nhl_network
    depends_on:
      - user_code


  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  daemon:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: dagster
      args:
        DAGSTER_CONFIG: "local"
    command: "dagster-daemon run"
    container_name: daemon
    env_file:
      - dev.env
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - nhl_network
    depends_on:
      - user_code

  user_code:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: user_code
      args:
        DAGSTER_CONFIG: "local"
    container_name: user_code
    image: nhl_user_code
    command: "dagster api grpc -h 0.0.0.0 -p 4000 -f nhl_dagster/repo.py"  
    env_file:
      - dev.env
    environment:
      DAGSTER_CURRENT_IMAGE: "nhl_user_code"
    volumes:
      - ./nhl_dagster:/opt/dagster/dagster_home/nhl_dagster/ 
      - ./nhl_dbt:/opt/dagster/dagster_home/nhl_dbt/ 
    networks:
      - nhl_network

networks:
  nhl_network:
    driver: bridge
    name: nhl_network